/*
 * -------------------------------------------------
 *  nf-core/metapep Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements
  withName:download_proteins {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:predict_proteins {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  withName:generate_peptides {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 20.h * task.attempt, 'time' ) }
    cache = 'lenient'
  }
  withName:split_pred_tasks {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
    cache = 'lenient'
  }
  withName:predict_epitopes {
    cache = 'lenient'
  }
  withName:merge_predictions_buffer {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
    cache = 'lenient'
  }
  withName:merge_predictions {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
    cache = 'lenient'
  }
  withName:prepare_score_distribution {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  withName:plot_score_distribution {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
    cache = 'lenient'
  }
  withName:prepare_entity_binding_ratios {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  withName:plot_entity_binding_ratios {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
    cache = 'lenient'
  }
  withName:get_software_versions {
    cache = false
  }
}
